generator client {
    provider = "prisma-client-js"
    // previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider     = "mongodb"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
    // extensions = [pgvector(map: "vector")]
}

enum GptStyle {
    author_style
    casual_conversation
    tutorials_and_guides
    informative_and_newsy
}

enum DefaultAuthorName {
    malcolm_gladwell
    dan_ariely
    brene_brown
    jane_austen
    gabriel_garcia_marquez
    seth_godin
}

enum BlogPreference {
    draft
    publish
}

enum QueueStatus {
    pending
    completed
    failed
}

model Users {
    id       String @id @map("_id")
    userId   String @unique @default(cuid())
    email    String @unique
    username String
    image    String

    settings        Settings?
    queue           Queues[]
    subqueue        SubQueues[]
    contentmetadata ContentMetaData[]

    @@map("users")
}

model Settings {
    id                    String             @id @map("_id")
    userId                String             @unique
    gpt_style             GptStyle           @default(author_style)
    default_author_name   DefaultAuthorName? @default(malcolm_gladwell)
    publishing_preference BlogPreference     @default(draft)
    hashnode_token        String             @default("")

    user Users @relation(fields: [userId], references: [userId])

    @@map("settings")
}

model Queues {
    id            String      @id @map("_id")
    userId        String
    title         String
    description   String
    status        QueueStatus @default(pending)
    jobs          Int
    completedJobs Int

    user     Users       @relation(fields: [userId], references: [userId])
    subqueue SubQueues[]

    @@map("queues")
}

model SubQueues {
    id      String      @id @map("_id")
    queueId String
    userId  String
    status  QueueStatus @default(pending)
    title   String
    message String

    user  Users  @relation(fields: [userId], references: [userId])
    queue Queues @relation(fields: [queueId], references: [id])

    @@map("subqueues")
}

model ContentMetaData {
    id          String @id @map("_id")
    userId      String
    title       String
    sub_heading String
    emoji       String
    link        String

    user Users @relation(fields: [userId], references: [userId])

    @@map("contentmetadata")
}
