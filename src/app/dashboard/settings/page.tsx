"use client";
import {
  FlexColStart,
  FlexRowCenterBtw,
  FlexRowStart,
  FlexRowStartBtw,
  FlexRowStartCenter,
} from "@/components/flex";
import Button from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useDataContext } from "@/context/DataContext";
import { GPT_RESP_STYLE } from "@/data/gpt";
import { cn, getGptStyle } from "@/lib/utils";
import { AUTHOR_NAMES, GPT_RESP_STYLE_NAME } from "@/types";
import {
  CheckCheck,
  ChevronDown,
  ChevronRight,
  MoveLeft,
  ShieldAlert,
  Volume2,
} from "lucide-react";
import Image from "next/image";
import Link from "next/link";
import React from "react";
import { Switch } from "@/components/ui/switch";

export default function Settings() {
  const { showToolBar, setActivePage } = useDataContext();
  const [authVisi, setAuthVisi] = React.useState<boolean>(false);

  const toggleAuthVisi = () => setAuthVisi(!authVisi);

  React.useEffect(() => {
    showToolBar();
    setActivePage("settings");
  }, []);
  return (
    <FlexColStart className="w-full h-screen overflow-y-scroll hideScrollBar pb-[10em]">
      <FlexColStart className="w-full px-4 py-4">
        <Link href="/dashboard/home">
          <MoveLeft
            className="text-white-100 p-2 rounded-md bg-dark-100 "
            size={30}
          />
        </Link>
        <span className="font-ppSB text-xl text-white-100">Settings</span>
      </FlexColStart>

      {/* main */}
      <FlexColStart className="w-full px-4 py-1 ">
        {/* Authrozie */}
        <FlexColStart className="w-full h-auto bg-dark-200 rounded-lg px-4 py-3 gap-0 transition-all">
          <button className="w-full cursor-pointer" onClick={toggleAuthVisi}>
            <FlexRowCenterBtw className="w-full">
              <FlexRowStartCenter>
                <Image
                  src="/images/logos/hashnode.png"
                  width={30}
                  height={30}
                  alt="hashnode"
                  className="rounded-md scale-[.95] "
                />
                <span className="font-ppReg text-sm text-white-100 flex items-center justify-start gap-3">
                  Authorize Hashnode{" "}
                  {false ? (
                    <CheckCheck size={15} className="text-green-400" />
                  ) : (
                    <ShieldAlert size={15} className="text-red-305" />
                  )}
                </span>
              </FlexRowStartCenter>
              <ChevronRight
                size={15}
                className={cn(
                  "text-white-100 transition-all",
                  authVisi && "transform rotate-90"
                )}
              />
            </FlexRowCenterBtw>
          </button>

          <FlexColStart
            className={cn(
              "w-full transition-all overflow-hidden p-0 gap-0",
              authVisi ? "h-auto mt-3" : "h-[0px] mt-0"
            )}
          >
            <span className="text-white-100/50 text-xs font-ppReg mb-2">
              Your hashnode token{" "}
              <a
                className="text-blue-101 underline"
                href="https://hashnode.com/settings/developer"
                target="_blank"
              >
                click here
              </a>
            </span>
            <Input
              placeholder="Hashnode Token: xxxx-xx-xxxx-xxxx-xxxxxx"
              className="w-full font-ppReg text-xs bg-dark-105 text-white-100 border-dark-200/10 outline-none focus-visible:ring-0 focus-visible:border-dark-200/20"
            />
            <Button className="w-full h-[40px] mt-2 text-xs bg-blue-100 rounded-md font-ppReg">
              Authorize
            </Button>
          </FlexColStart>
        </FlexColStart>

        {/* blog ai style */}
        <FlexColStart className="w-full mt-3">
          <FlexColStart className="leading-none gap-0">
            <h1 className="font-ppSB text-sm text-white-100">Blog Style</h1>
            <span className="font-ppL text-xs text-white-300">
              Customize how your blog is generated by hashmind.
            </span>
          </FlexColStart>
          <BlogStyleComp />
        </FlexColStart>
      </FlexColStart>
    </FlexColStart>
  );
}

type StyleChangesType = {
  name: GPT_RESP_STYLE_NAME | "";
  author_name?: AUTHOR_NAMES | "";
  isAuthor?: boolean;
};

interface DefaultBlogStyle extends StyleChangesType {}

function BlogStyleComp() {
  // DD => Dropdown
  const [isAuthorStyle, setIsAuthorStyle] = React.useState<boolean>(false);

  const [activeDD, setActiveDD] = React.useState<GPT_RESP_STYLE_NAME | "">(
    "" as GPT_RESP_STYLE_NAME
  );

  const [styleChanges, setStyleChanges] =
    React.useState<StyleChangesType | null>(null);

  const [defaultBlogStyle, setDefaultBlogStyle] =
    React.useState<DefaultBlogStyle>({
      name: "author_style",
      author_name: "dan_ariely",
      isAuthor: true,
    });

  const toggleDD = (name: GPT_RESP_STYLE_NAME) => {
    if (name === activeDD) setActiveDD("");
    else setActiveDD(name);
  };

  return (
    <FlexColStart className="w-full">
      {GPT_RESP_STYLE.map((d, i) => (
        <FlexRowStart key={i} className="w-full flex-wrap">
          <FlexColStart className="w-full h-auto bg-dark-200 rounded-lg px-4 py-2 gap-0 transition-all">
            <button
              className="w-full cursor-pointer"
              onClick={() => toggleDD(d.name)}
            >
              <FlexRowCenterBtw className="w-full">
                <FlexRowStartCenter>
                  <span className="text-2xl">{d.emoji}</span>
                  <span className="font-ppReg text-xs text-white-100/80 flex items-center justify-start gap-3">
                    {d.title}
                  </span>
                </FlexRowStartCenter>
                <FlexRowStartCenter>
                  <span
                    className={cn(
                      "cursor-pointer px-2 py-1 rounded-md flex items-center justify-start gap-2 scale-[.90] transition-all ",
                      activeDD !== d.name && "invisible",
                      styleChanges?.isAuthor && styleChanges?.name === d.name
                        ? "text-white-100 bg-blue-101 "
                        : "bg-dark-100 text-white-100/40"
                    )}
                  >
                    <span className="text-xs text-white-100/60">Save</span>
                    <CheckCheck size={15} />
                  </span>
                  {defaultBlogStyle.name === d.name && (
                    <CheckCheck size={15} className="text-blue-101" />
                  )}
                  <ChevronRight
                    size={15}
                    className={cn(
                      "text-white-100 transition-all",
                      activeDD === d.name && "transform rotate-90"
                    )}
                  />
                </FlexRowStartCenter>
              </FlexRowCenterBtw>
            </button>

            <FlexColStart
              className={cn(
                "w-full transition-all overflow-hidden p-0 gap-0",
                activeDD === d.name ? "h-auto mt-3" : "h-[0px] mt-0"
              )}
            >
              <StyleInfo style={d.name} defaultBlogStyle={defaultBlogStyle} />
            </FlexColStart>
          </FlexColStart>
        </FlexRowStart>
      ))}
    </FlexColStart>
  );
}

type StyleInfoProps = {
  style: GPT_RESP_STYLE_NAME;
  isAudioPlaying: boolean;
  activePlayerName: GPT_RESP_STYLE_NAME | string;
  defaultBlogStyle: DefaultBlogStyle;
};

function StyleInfo({
  style,
  isAudioPlaying,
  activePlayerName,
  defaultBlogStyle,
}: StyleInfoProps) {
  let comp = null;
  if (style === "author_style") {
    comp = (
      <FlexColStart className="w-full">
        <FlexRowStartBtw className="w-full">
          <span className="text-white-100/50 text-xs font-ppReg mb-2">
            Write in these author styles:
          </span>
          <FlexRowStart className="w-auto">
            <Switch
              className=" data-[state=checked]:bg-blue-101"
              checked={defaultBlogStyle.name === "author_style"}
            />
            <button
              className={cn(
                "p-1 rounded-md bg-dark-100 border-[.2px] border-white-100/20 ",
                activePlayerName === "author_style"
                  ? "text-blue-101"
                  : "text-white-100/40"
              )}
            >
              <Volume2 size={15} />
            </button>
          </FlexRowStart>
        </FlexRowStartBtw>
        <FlexRowStartCenter className="w-full">
          <select
            name=""
            id=""
            className="w-auto text-[10px] px-1 py-1 bg-dark-400 rounded-md font-ppReg border-none outline-none"
          >
            <option value="">Select author style</option>
            {getGptStyle("author_style" as GPT_RESP_STYLE_NAME)?.styles.map(
              (a, i) => (
                <option value={a.name} key={i}>
                  {a.emoji} {a.title}
                </option>
              )
            )}
          </select>

          <FlexRowStart className="w-auto">
            <span className="text-xs text-white-100/50 font-ppL">
              Default:{" "}
              <span className="font-ppReg px-2 py-1 rounded-md bg-dark-300 text-[10px] text-white-100">
                {defaultBlogStyle?.isAuthor
                  ? getGptStyle(
                      "author_style" as GPT_RESP_STYLE_NAME
                    )?.styles.find(
                      (a) => a.name === defaultBlogStyle.author_name
                    )?.title
                  : getGptStyle(
                      "author_style" as GPT_RESP_STYLE_NAME
                    )?.styles.find((a) => a.default)?.title}
              </span>{" "}
            </span>
          </FlexRowStart>
        </FlexRowStartCenter>
      </FlexColStart>
    );
  }

  return comp;
}
